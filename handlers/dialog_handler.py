import random
from telegram.update import Update
from telegram.ext import CallbackContext, MessageHandler, Filters, CallbackQueryHandler
from telegram.user import User
from telegram import ReplyKeyboardMarkup, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.files.photosize import PhotoSize
from database import DataBase
from utils import send_copy, get_input_media


def _next_dialog(update: Update, context: CallbackContext):
    user: User = update.message.from_user

    base = DataBase()
    companion_id = base.reset_companion(str(user.id))

    base.set_status(str(user.id), "pause")
    base.set_status(companion_id, "pause")

    if len(companion_id):
        keyboard = [["–ò—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üëÄ"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        context.bot.send_message(companion_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=markup)

    awaiting = base.get_waiting()

    if not len(awaiting):
        base.set_status(str(user.id), "waiting")

        keyboard = [['–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ üñêüèª']]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        update.message.reply_text("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤", reply_markup=markup)

        base.close()

    else:

        new_companion_id = random.choice(awaiting)[0]
        base.set_status(str(user.id), "chatting")
        base.set_status(new_companion_id, "chatting")

        base.set_companion(str(user.id), new_companion_id)

        keyboard = [["–ò—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üëÄ"], ["–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ üñêüèª"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        context.bot.send_message(user.id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω üêµ", reply_markup=markup)
        context.bot.send_message(str(new_companion_id), "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω üêµ", reply_markup=markup)

        base.close()


def _stop_dialog(update: Update, context: CallbackContext):
    user: User = update.message.from_user

    base = DataBase()

    companion_id = base.reset_companion(str(user.id))
    base.set_status(str(user.id), "pause")
    base.set_status(companion_id, "pause")

    keyboard = [["–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ üöÄ"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if len(str(companion_id)):
        context.bot.send_message(companion_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=markup)
        context.bot.send_message(user.id, "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–≤—è–∑—å —Å –í–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–ºüôÑ.", reply_markup=markup)
    else:
        context.bot.send_message(user.id, "–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üôÑ.", reply_markup=markup)

    base.close()


def _filter_message(update: Update, context: CallbackContext):
    base = DataBase()
    message: Message = update.message
    companion = base.get_companion(str(message.from_user.id))

    if type(message.effective_attachment) is list:
        file_id = message.effective_attachment[-1].file_id
        file_name = ""
        file_type = f"{PhotoSize}"
    else:
        file_id = message.effective_attachment.file_id
        file_name = ""
        file_type = f"{type(message.effective_attachment)}"

    if len(companion):
        base.save_filtered(str(message.from_user.id), str(message.message_id), str(message.from_user.id),
                           companion, message.caption or "", file_name, file_id, file_type)

        base.save_message(f"{message.message_id}",
                          f"{message.from_user.id}",
                          f"{message.from_user.id}",
                          companion, message.text or message.caption or "", file_id)

        alert_message = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ä–Ω–æ. –ü–æ–∫–∞–∑–∞—Ç—å?"

        show_btn = InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"show_{message.from_user.id}_{message.message_id}")
        markup = InlineKeyboardMarkup([[show_btn]])

        photo = open("spoiler.jpg", "rb")

        context.bot.send_photo(companion, photo, caption=alert_message, reply_markup=markup)

        base.close()


def _not_allowed(update: Update, context: CallbackContext):
    update.message.reply_text("–°—Ç–∏–∫–µ—Ä—ã, –∫—Ä—É–≥–ª—ã–µ –≤–∏–¥–µ–æ, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")


def _message(update: Update, context: CallbackContext):
    message: Message = update.message

    base = DataBase()
    companion = base.get_companion(str(message.from_user.id))

    if len(companion):
        if message.effective_attachment is not None:
            file_id = message.effective_attachment.file_id
        else: file_id = ""
        base.save_message(f"{message.message_id}",
                          f"{message.from_user.id}",
                          f"{message.from_user.id}",
                          companion, message.text or message.caption or "", file_id)
        send_copy(companion, message.text or message.caption or "", file_id, f"{type(message.effective_attachment)}", context.bot)
    base.close()


def _show_filtered(update: Update, context: CallbackContext):
    callback: CallbackQuery = update.callback_query
    src_chat, src_message = str(callback.data).split("_")[1:]

    base = DataBase()

    file_id, content_type, text = base.get_filtered(src_chat, src_message)
    message: Message = callback.message
    message.edit_media(get_input_media(file_id, content_type))
    if len(text):
        context.bot.edit_message_caption(callback.from_user.id, callback.message.message_id, caption=text)

    base.close()


def handle():
    return [MessageHandler(Filters.text("–ò—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üëÄ"), _next_dialog),
            MessageHandler(Filters.text("–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ üöÄ"), _next_dialog),
            MessageHandler(Filters.text("–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ üñêüèª") | Filters.text("–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ üñêüèª"), _stop_dialog),
            MessageHandler(Filters.text | Filters.audio | Filters.voice, _message),
            MessageHandler(Filters.photo | Filters.document | Filters.video, _filter_message),
            MessageHandler(Filters.venue | Filters.location | Filters.contact | Filters.video_note |
                           Filters.animation | Filters.sticker, _not_allowed),
            CallbackQueryHandler(_show_filtered, pattern="^show_[0-9]{6,9}_[0-9]{1,10}$")]
